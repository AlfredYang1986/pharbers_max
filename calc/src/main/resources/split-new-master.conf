akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      //      hostname = "59.110.31.215"
      port = 2551
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://calc@127.0.0.1:2551"
      //      "akka.tcp://calc@59.110.31.215:2551",
      //      "akka.tcp://calc@59.110.31.106:2552",
      //      "akka.tcp://calc@59.110.31.50:2553"
    ]
    roles = ["splitmaster"]
    auto-down = on
    #seed-node-timeout = 60
    #sauto-down-unreachable-after = 10s

    role {
      #seed.min-nr-of-members = 1,
      splitmaster.min-nr-of-members = 1
      splitgeneratepanelslave.min-nr-of-members = 1
//      splitcalcymslave.min-nr-of-members = 1
      splitfilterexcelslave.min-nr-of-members = 1
      splitsplitexcelslave.min-nr-of-members = 1
      splitgroupslave.min-nr-of-members = 1
      splitcalcslave.min-nr-of-members = 1
      splitrestorebsonslave.min-nr-of-members = 1
      #splitworker.min-nr-of-members = 1
    }
  }

  # how often should the node send out gossip information?
  gossip-interval = 10s

  # discard incoming gossip messages if not handled within this duration
  gossip-time-to-live = 20s

  # how often should the leader perform maintenance tasks?
  leader-actions-interval = 10s
}
