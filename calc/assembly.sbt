assemblyJarName in assembly := "pharbers-calc_2.11-1.2.jar"

test in assembly := {}


assemblyMergeStrategy in assembly := {
	case PathList("akka", "stream", xs @ _*) => MergeStrategy.first
	case PathList("scala", "annotation", xs @ _*) => MergeStrategy.first
	case PathList("scala", "beans", xs @ _*) => MergeStrategy.first
	case PathList("scala", "collection", xs @ _*) => MergeStrategy.first
	case PathList("scala", "compat", xs @ _*) => MergeStrategy.first
	case PathList("scala", "concurrent", xs @ _*) => MergeStrategy.first
	case PathList("scala", "io", xs @ _*) => MergeStrategy.first
	case PathList("scala", "math", xs @ _*) => MergeStrategy.first
	case PathList("scala", "ref", xs @ _*) => MergeStrategy.first
	case PathList("scala", "reflect", xs @ _*) => MergeStrategy.first
	case PathList("scala", "runtime", xs @ _*) => MergeStrategy.first
	case PathList("scala", "sys", xs @ _*) => MergeStrategy.first
	case PathList("scala", "text", xs @ _*) => MergeStrategy.first
	case PathList("scala", "util", xs @ _*) => MergeStrategy.first
	case PathList("org", "slf4j", xs @ _*) => MergeStrategy.first
	case PathList("org", "joda", xs @ _*) => MergeStrategy.first
	case PathList("javax", "mail", xs @ _*) => MergeStrategy.first
	case "library.properties" => MergeStrategy.concat
	case PathList(ps @ _*) if ps.last endsWith "Predef$any2stringadd$.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Array$.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "DeprecatedPredef$class.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Enumeration$ValueOrdering$.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Enumeration$ValueSet$.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Enumeration.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "LowPriorityImplicits$$anon$4.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "LowPriorityImplicits.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$$anon$1.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$$anon$2.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$$anon$3.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$$eq$colon$eq$.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$$less$colon$less.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$ArrayCharSequence.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$ArrowAssoc$" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$ArrowAssoc.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$DummyImplicit$.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$$eq$colon$eq.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$ArrowAssoc$.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$DummyImplicit.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$Ensuring$.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$Ensuring.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$Pair$.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$RichException$.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$RichException.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$SeqCharSequence.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$StringAdd$.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$StringAdd.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$StringFormat$.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$StringFormat.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$Triple$.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Predef$any2stringadd.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "ILoggerFactory.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMarkerFactory.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Logger.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "LoggerFactory.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MDC.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Marker.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MarkerFactory.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "BasicMDCAdapter.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "BasicMarker.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "BasicMarkerFactory.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "FormattingTuple.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MarkerIgnoringBase.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MD4.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Ntlm.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "image_gif.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "mage_jpeg.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "message_rfc822.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "multipart_mixed.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "text_html.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "text_plain$NoCloseOutputStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "text_plain.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "text_xml.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "AString.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Argument.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Atom.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "adCommandException.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "ByteArray.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "CommandFailedException.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "ConnectionException.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Literal.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "LiteralException.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "ParsingException.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Protocol.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "ProtocolException.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Response.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "ResponseHandler.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "ACL.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "ResponseInputStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "AppendUID.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "DefaultFolder$1.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "DefaultFolder$2.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "DefaultFolder.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPBodyPart.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$1.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$10.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$11.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$12.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$13.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$14.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$15.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$16.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$17.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$18.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$19.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$2.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$3.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$4.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$5.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$6.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$7.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$8.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$9.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$FetchProfileItem.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder$ProtocolCommand.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPFolder.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPInputStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPMessage$FetchProfileCondition.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPMessage.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPMultipartDataSource.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPNestedMessage.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPSSLStore.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPStore$1.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPStore$ConnectionPool.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPStore.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "LengthCounter.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MessageCache.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Rights$Right.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Rights.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SortTerm.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Utility$Condition.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Utility.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "BASE64MailboxDecoder.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "BASE64MailboxEncoder.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "BODY.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "BODYSTRUCTURE.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "ENVELOPE.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "FLAGS.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "FetchItem.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPAddress.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPSaslAuthenticator$1.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "IMAPSaslAuthenticator.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "INTERNALDATE.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Item.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "ListInfo.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MailboxInfo.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MessageSet.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Namespaces$Namespace.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Namespaces.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "RFC822DATA.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "RFC822SIZE.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SaslAuthenticator.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SearchSequence.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Status.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "UID.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "UIDSet.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "AppendStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "DefaultFolder.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "POP3Folder.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "POP3Message.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "POP3SSLStore.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "POP3Store.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "Status.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "TempFile.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "WritableSharedFile.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "DigestMD5.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SMTPAddressFailedException.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SMTPAddressSucceededException.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SMTPMessage.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SMTPOutputStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SMTPSSLTransport.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SMTPSaslAuthenticator$1.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SMTPSaslAuthenticator.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SMTPSendFailedException.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SMTPSenderFailedException.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SMTPTransport$Authenticator.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SMTPTransport$DigestMD5Authenticator.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SMTPTransport$LoginAuthenticator.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SMTPTransport$NtlmAuthenticator.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SMTPTransport$PlainAuthenticator.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SMTPTransport.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SaslAuthenticator.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "ASCIIUtility.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "BASE64DecoderStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "BASE64EncoderStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "BEncoderStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "CRLFOutputStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "DecodingException.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "FolderClosedIOException.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "LineInputStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "LineOutputStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "LogOutputStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MailSSLSocketFactory$1.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MailSSLSocketFactory$MailTrustManager.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MailSSLSocketFactory.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MessageRemovedIOException.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MimeUtil$1.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MimeUtil.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "PropUtil.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "QDecoderStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "QEncoderStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "QPDecoderStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "QPEncoderStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "ReadableMime.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SharedByteArrayOutputStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SocketFetcher$1.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "SocketFetcher.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "TraceInputStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "TraceOutputStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "UUDecoderStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "UUEncoderStream.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "LogManagerProperties$1.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "LogManagerProperties.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MailHandler$DefaultAuthenticator.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MailHandler$GetAndSetContext.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MailHandler$TailNameFormatter.class" => MergeStrategy.first
	case PathList(ps @ _*) if ps.last endsWith "MailHandler.class" => MergeStrategy.first


	case x =>
		val oldStrategy = (assemblyMergeStrategy in assembly).value
		oldStrategy(x)
}